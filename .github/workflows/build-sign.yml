name: Build, Publish, and Code Sign DummyWebApp

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.x'

    - name: Restore dependencies
      run: dotnet restore src/DummyWebApp.csproj

    - name: Build project
      run: dotnet build src/DummyWebApp.csproj --configuration Release

    - name: Publish web app
      run: dotnet publish src/DummyWebApp.csproj --configuration Release --output src/publish

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: src/publish/

  sign:
    needs: build
    runs-on: windows-latest

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: artifacts/

    - name: Install Windows SDK
      shell: pwsh
      run: |
        # Download and install Windows SDK
        $sdkUrl = "https://go.microsoft.com/fwlink/?linkid=2196127"
        $installerPath = "$env:RUNNER_TEMP\winsdksetup.exe"
        Invoke-WebRequest -Uri $sdkUrl -OutFile $installerPath
        Start-Process -FilePath $installerPath -ArgumentList "/quiet", "/norestart", "/features", "OptionId.SigningTools" -Wait

    - name: Create self-signed certificate and sign DLL
      shell: pwsh
      run: |
        $cert = New-SelfSignedCertificate -Type CodeSigning -Subject "CN=DummyWebAppPOC" -CertStoreLocation "Cert:\CurrentUser\My"
        $pfxPath = "$env:RUNNER_TEMP\dummywebapp.pfx"
        $password = ConvertTo-SecureString -String "P@ssw0rd!" -Force -AsPlainText
        Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $password
        $dllPath = "artifacts\DummyWebApp.dll"
        
        # Find signtool.exe in Windows Kits
        $signtoolPaths = @(
          "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe"
        )
        
        $signtool = $null
        foreach ($path in $signtoolPaths) {
          if (Test-Path $path) {
            $signtool = $path
            break
          }
        }
        
        if (-not $signtool) {
          # Try to find any version dynamically
          $kitsBin = "C:\Program Files (x86)\Windows Kits\10\bin"
          if (Test-Path $kitsBin) {
            $signtool = Get-ChildItem -Path $kitsBin -Recurse -Name "signtool.exe" | 
                       Where-Object { $_ -like "*x64*" } | 
                       Select-Object -First 1
            if ($signtool) {
              $signtool = Join-Path $kitsBin $signtool
            }
          }
        }
        
        if ($signtool -and (Test-Path $signtool)) {
          Write-Host "Using signtool at: $signtool"
          & $signtool sign /f $pfxPath /p "P@ssw0rd!" /fd SHA256 $dllPath
        } else {
          Write-Error "signtool.exe not found"
          exit 1
        }

    - name: Upload signed artifacts
      uses: actions/upload-artifact@v4
      with:
        name: signed-artifacts
        path: artifacts/